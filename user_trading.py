from enum import Enum

from httpx import Response
from httpx_responses.add_order_response import AddOrderResponse
from private_api import PrivateAPI

from utils import transform_data_bool, transform_data_enum

### ENUMS #################################################################
OrderType = Enum('OrderType', ['MARKET', 'LIMIT', 'STOP_LOSS', 'TAKE_PROFIT', 'STOP_LOSS_LIMIT', 'TAKE_PROFIT_LIMIT', 'SETTLE_POSITION'])
OrderDirection = Enum('OrderDirection', ['BUY', 'SELL'])
Trigger = Enum('Trigger', ['LAST', 'INDEX'])
SelfTradePreventionType = Enum('SelfTradePreventionType', ['CANCEL_NEWEST', 'CANCEL_OLDEST', 'CANCEL_BOTH'])
OrderFlags = Enum('OrderFlags', ['POST', 'FCIB', 'FCIQ', 'NOMPP', 'VIQC'])
TimeInForce = Enum('TimeInForce', ['GTC', 'IOC', 'GTD'])

class UserTrading(PrivateAPI):

    async def add_order(
            self, 
            type: OrderType, 
            direction: OrderDirection, 
            volume: str, 
            pair: str, 
            userref: int=None,
            display_volume: str=None, 
            price: str=None, 
            price_secondary: str=None, 
            trigger: Trigger=None, 
            leverage: str=None, 
            reduce_only: bool=False, 
            stp_type: SelfTradePreventionType=SelfTradePreventionType.CANCEL_NEWEST, 
            order_flags: list[OrderFlags]=[], 
            time_in_force: TimeInForce=TimeInForce.GTC, 
            start_time: str=None, 
            exp_time: str=None,
            close_type: OrderType=None, 
            close_price: str=None,
            close_price_secondary: str=None, 
            deadline: str=None,
            validate: bool=False) -> AddOrderResponse:
        """
        Place a new order.

        Note: See the MarketData#get_asset_pairs response for details on the
        available trading pairs, their price and quantity precisions, order
        minimums, available leverage, etc.

        Parameters
        ----------
        type : OrderType
            Order type
        direction : OrderDirection
            Order direction (buy/sell)
        volume : str
            Order quantity in terms of the base asssettabl. Note: Volume can 
            be specified as 0 for closing margin orders to automatically fill 
            the requisite quantity.
        pair : str
            Asset pair `id` or `altname`
        userref : int, optional
            User reference ID, by default None. userref is an optional user-specified integer id that can be associated with any number of orders. Many clients choose a userref corresponding to a unique integer id generated by their systems (e.g. a timestamp). However, because we don't enforce uniqueness on our side, it can also be used to easily group orders by pair, side, strategy, etc. This allows clients to more readily cancel or query information about orders in a particular group, with fewer API calls by using userref instead of our txid, where supported.
        display_volume : str, optional
            Order quantity in terms of the base asset, by default None.This is used to create an iceberg order, with display_volume as visible quantity, hiding rest of the order. This can only be used with `limit` order type.
        price : str, optional ******************* THIS IS SO MANY PARAMS SO I'M STOPPING HERE FOR NOW ****************
            _description_, by default None
        price_secondary : str, optional
            _description_, by default None
        trigger : Trigger, optional
            _description_, by default None
        leverage : str, optional
            _description_, by default None
        reduce_only : bool, optional
            _description_, by default False
        stp_type : SelfTradePreventionType, optional
            _description_, by default SelfTradePreventionType.CANCEL_NEWEST
        order_flags : list[OrderFlags], optional
            _description_, by default []
        time_in_force : TimeInForce, optional
            _description_, by default TimeInForce.GTC
        start_time : str, optional
            _description_, by default None
        exp_time : str, optional
            _description_, by default None
        close_type : OrderType, optional
            _description_, by default None
        close_price : str, optional
            _description_, by default None
        close_price_secondary : str, optional
            _description_, by default None
        deadline : str, optional
            _description_, by default None
        validate : bool, optional
            _description_, by default False

        Returns
        -------
        Response
            httpx.Response with an `error` array and a `result` object containing `descr` (order description info) and `txid` (transaction IDs for order)
        """        
        data = {
            'ordertype': transform_data_enum(type),
            'type': transform_data_enum(direction),
            'volume': volume,
            'pair': pair,
            'reduce_only': transform_data_bool(reduce_only),
            'stptype': transform_data_enum(stp_type),
            'timeinforce': transform_data_enum(time_in_force),
            'validate': transform_data_bool(validate),
        }
        if userref:
            data['userref'] = userref
        if display_volume:
            data['displayvol'] = display_volume
        if price:
            data['price'] = price
        if price_secondary:
            data['price2'] = price_secondary
        if trigger:
            data['trigger'] = trigger
        if leverage:
            data['leverage'] = leverage
        if order_flags:
            data['oflags'] = ','.join(map(transform_data_enum, order_flags))
        if start_time:
            data['starttm'] = start_time
        if exp_time:
            data['expiretm'] = exp_time
        if close_type:
            data['close[ordertype]'] = transform_data_enum(close_type)
        if close_price:
            data['close[price]'] = close_price
        if close_price_secondary:
            data['close[price2]'] = close_price_secondary
        if deadline:
            data['deadline'] = deadline
        response = await self._get_private_api_response('AddOrder', data)
        return AddOrderResponse(response)

    def add_order_batch(self):
        pass
    
    def edit_order(self):
        pass
    
    def cancel_order(self):
        pass
    
    def cancel_all_orders(self):
        pass
    
    def cancel_all_orders_after_x(self):
        pass
    
    def cancel_order_batch(self):
        pass
    